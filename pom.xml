<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>CucumberDemo</artifactId>
    <version>2.0.5</version>
    <!-- Snapshot is a development version which doesnt affect release version. And it stays in the remote
    maven repository for only a week -->
    <!-- release version 2.0.2 are built from master branch after running the regression test -->

    <properties>
        <!-- Maven uses jdk 6 by default which dont support newly added features like lambda -->
        <!-- so we are changing jdk to 1.8 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!-- parent tag within which all dependencies will be declared. -->
    <dependencies>
        <!-- Junit -->
        <dependency>
            <groupId>junit</groupId> <!-- company name -->
            <artifactId>junit</artifactId><!-- product name(library name) -->
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <!-- Cucumber libraries -->
        <!-- https://mvnrepository.com/artifact/info.cukes/cucumber-java -->
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>1.2.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/info.cukes/cucumber-junit -->
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>1.2.5</version>
        </dependency>

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>1.2.5</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.11.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.15.0</version>
        </dependency>
    </dependencies>

    <!-- plugins and their configurations can be different and we can choose a specific maven build configuration
    based on the maven profile -->
    <!-- we need to run maven profiles because we want to diffirenciate between smoketestRunner class and RegressionRunner
    in the surefire plugin -->

    <!-- so each profile has different surefire plugin test include configurations -->
    <profiles>
        <profile>
            <id>smoke</id>
            <activation>
                <!-- if no profile is chosen smoke will run -->
                <activeByDefault>true</activeByDefault>
            </activation>
            <!-- build tag is used for project building configurations and plugins. -->
            <build>
                <!-- plugins are libraries similar to dependencies -->
                <!-- difference is dependencies are used by programmers to code by using existing functionalities comig from outside
                libraries -->
                <!-- plugins though dont require extra coding these are features that get executed and performed automatically as part
                of project building -->
                <plugins>
                    <!-- surefire plugin is used for running all tests(under test folder) within the project while building the project in test phase-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.21.0</version>
                        <configuration>
                            <!-- which tests do you want to include in the surefire plugin run in test phase -->
                            <includes>
                                <!-- ** means anywhere under project directory -->
                                <include>**/SmokeTestRunner.java</include>
                            </includes>
                            <testFailureIgnore>true</testFailureIgnore>
                        </configuration>
                    </plugin>

                    <plugin>
                        <!-- pie chart nice cucumber report -->
                        <groupId>net.masterthought</groupId>
                        <artifactId>maven-cucumber-reporting</artifactId>
                        <version>2.8.0</version>
                        <!-- how should this plugin be executed-->
                        <executions>
                            <execution>
                                <id>execution</id>
                                <!-- which phase this plugin should be executed? -->
                                <phase>verify</phase><!-- when cucumber.json from runner class is ready -->
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <!-- here give configuration for the report like name, where
                                the plugin should find cucumber.json and where the final nice report
                                should be created(generated)? -->
                                <configuration>
                                    <!-- what ever we put here will appear in the report title -->
                                    <projectName>Zelle Cucumber(POM File)</projectName>
                                    <!-- where the nice report should be generated in? -->
                                    <!-- from pom file project build directory is target folder -->
                                    <outputDirectory>${project.build.directory}/cucumber-report-pie-chart
                                    </outputDirectory>
                                    <!-- which cucumber junit statistics from runner class should I use? -->
                                    <cucumberOutput>${project.build.directory}/cucumber.json</cucumberOutput>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>regression</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <!-- plugins are libraries similar to dependencies -->
                <!-- difference is dependencies are used by programmers to code by using existing functionalities comig from outside
                libraries -->
                <!-- plugins though dont require extra coding these are features that get executed and performed automatically as part
                of project building -->
                <plugins>
                    <!-- surefire plugin is used for running all tests(under test folder) within the project while building the project in test phase-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.21.0</version>
                        <configuration>
                            <!-- which tests do you want to include in the surefire plugin run in test phase -->
                            <includes>
                                <!-- ** means anywhere under project directory -->
                                <include>**/RegressionRunner.java</include>
                            </includes>
                            <testFailureIgnore>true</testFailureIgnore>
                        </configuration>
                    </plugin>

                    <plugin>
                        <!-- pie chart nice cucumber report -->
                        <groupId>net.masterthought</groupId>
                        <artifactId>maven-cucumber-reporting</artifactId>
                        <version>2.8.0</version>
                        <!-- how should this plugin be executed-->
                        <executions>
                            <execution>
                                <id>execution</id>
                                <!-- which phase this plugin should be executed? -->
                                <phase>verify</phase><!-- when cucumber.json from runner class is ready -->
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <!-- here give configuration for the report like name, where
                                the plugin should find cucumber.json and where the final nice report
                                should be created(generated)? -->
                                <configuration>
                                    <!-- what ever we put here will appear in the report title -->
                                    <projectName>Zelle Cucumber(POM File)</projectName>
                                    <!-- where the nice report should be generated in? -->
                                    <!-- from pom file project build directory is target folder -->
                                    <outputDirectory>${project.build.directory}/cucumber-report-pie-chart
                                    </outputDirectory>
                                    <!-- which cucumber junit statistics from runner class should I use? -->
                                    <cucumberOutput>${project.build.directory}/cucumber.json</cucumberOutput>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

        <!-- verify(goal) runs integration test of the project. Difference between integration test and unit test is
        unit test tests only one single method. whereas integration test of one application(java project) is testing whether all
        methods are working together as expected -->